* a useful language first

  - change sequent0 form an interpreter to a compiler

  - compile-time type-check needs run-time

* form an interpreter to a compiler

  - x ::
       我們需要設計一個 vm
       然後編譯到這個 vm 的 byte code
       難點在於 嵌套的函數體中的 uni-id
       現在的處理方式是
       name 下保存的是 pre-jojo 等等
       [用 jojo 泛指 jojo arrow lambda 等等 可嵌套者]
       call 一個 name 時
       uni-copy 遍歷 pre-jojo 以生成 jojo

  - k ::
       這裏語言的解釋性非常明顯
       因爲 處理 jojo 時
       有很多 runtime-dispatching
       做 dispatch 的是 explainer
       這樣做的效果是
       一個 name 下的 jojo 可以被不同的 explainer 做不同的處理

  - x ::
       但是我們知道這種看似靈活的方式 可能其實是不需要的
       在編譯時 就可以完全決定生成碼的函數體中
       是要調用那個函數 作用於哪些參數

  - k ::
       我們可以看一下別的語言是如何處理這些 uni-id 的
       可能都是在編譯時被編譯成了對棧的 peek 和 put
       [pop push peek put]
       甚至編譯成了 native code 而能夠分配寄存器

  - x ::
       我們可以把所有的 stack 都用 list 實現
       當需要的時候再優化爲 array
       前幾個版本中 antecedent 可以實現爲 jojo
       讓它在運行時動態生成數據
       [而不用編譯時 生成 antecedent 之數據]

  - k ::
       可以先爲帶有 gc 的語言寫 vm
       首先是 scheme 然後是 js

  - x ::
       沒錯
       這樣初期的版本就可以很快

* interpreter

  - x ::
       我覺得上面的想法還是太難了
       我們應該接着在日本寫的 scheme 版的 sequent0
       把這個解釋器寫完 看看效果如何

* a useful language first [again] <2016-11-29 Tue>

*** 靜態類型系統 與 語言的實用性

    - x ::
         當決定使用 靜態類型系統的時候
         不能被類型系統描述其大概 並融會於整個類型推演過程的函數
         就成了語言用性的限制

    - k ::
         沒錯
         我們當前實現的類型系統所能處理的 看來只是簡單的 term-rewrite 之類的函數
         並且我們不熟悉 haskell 之類的語言是如何讓自己變得實用的

    - x ::
         但是想來也不是如何困難
         畢竟 我們的類型系統所描述的也是機器狀態的變化
         只不過目前僅僅限於 ds 而已
         假設我們有一個全局變元
         我們需要描述以它爲基礎的狀態的變化之大致
         此時只要把它想象成一個受到限制的棧就可以了
         如此如此
         考慮一個 buffer
         比如一個二維矩陣
         我們需要用類型系統描述變化 buffer 的函數之大概

    - k ::
         但是注意
         如此所說的 '變化之大概' 只是類型作爲文檔的意義
         類型系統對機器的意義在於 所謂 '安全性'
         明確每個函數作用的前提
         使得我們能夠檢察出 我們的代碼中
         在前提不滿足時就作用這個函數 這類愚蠢的錯誤

    - x ::
         沒錯
         '安全性' 纔是類型系統更具有實用價值的意義
         不論處理何種函數
         只要我們能形成某種意義上的 '安全性'
         我們就有了一個有用的類型系統

    - k ::
         以 二維矩陣 或者 對 buffer 的文本編輯 爲例
         能想到什麼 '安全性' 嗎

*** 類型系統三用

    - x ::
         我想這裏我們又可以提煉出一個常識性的原則
         即
         類型系統意義有三
      1. 作爲文檔對函數之作用作大致描述
      2. 類型檢查保證前提不誤
         即 所謂的 '安全性'
      3. 以類型爲命題 以函數爲證明
         即 函數體來記錄 推演步驟

    - k ::
         我想我們不必擔心語言因爲有靜態類型系統而不實用
         我們一定能夠在解決具體問題的實踐中
         爲所面臨的問題設計出合適的類型系統

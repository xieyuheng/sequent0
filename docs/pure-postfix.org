#+title: pure-postfix

* no syntax keyword for ex-bind

  - x ::
       假使在這裏我們不用前綴 keyword
       而緊切 stack 語義
       那麼應該如何設計 binding 的語法呢

  - k ::
       我們可以回到之前的 #name 或 #:name

  - x ::
       我都忘記了我們當初爲何要背離這種語義
       在各種實現方式中遊蕩
       最終發現自己在原地轉圈
       正如找尋友誼之手
       正如找尋安寧之境
       找到一種生活的原則也是無謂
       因爲轉身我又會拋棄它

  - k ::
       我可以設想如此
       區分 >:name 與 #:name
       二者也可以記 '類型'
       前者爲 (-> [data] [])
       後者爲 (-> [data] [(# :name data)])

  - x ::
       啊 後者正如把 #:name 當作一個構造子

  - k ::
       看來是如此

  - x ::
       我們應該如何聲明與副作用有關的類型

* 不論如何 計算機之計算都是對機器狀態之改變

  - k ::
       我想這時就是使用我們之前所提出來的原則的時候了
       即 不論如何 計算機之計算都是對機器狀態之改變

  - x ::
       沒錯 計算機之計算都是對機器狀態之改變
       我們寫的函數將要[在適當的條件下]改變機器的狀態
       我們爲函數加的類型就是要大略記錄這些狀態之改變
       而函數式編程的特點就是 狀態之改變都是 '可逆'
       所謂 '可逆' 並非是說函數是可逆函數
       而是要試着給所謂帶有 '副作用' 的函數加類型才能看出
       進行 input 的函數 比如類型記爲 (-> [A] [B (output)])
       不論與什麼函數複合
       其 succedent 中的 (output) 都不能被消除

  - k ::
       啊 這樣就完全錯了不是嗎
       因爲 (-> [...] [...]) 只是用來記錄棧中的變化之大略
       而不能用來記錄輸入輸出相關的機器變化
       但是說 '副作用' 是不可逆的 可能也對
       因爲副作用可能會改變 '機器外部' 的狀態
       當然 這裏的 內部外部 也是人爲界定的

  - x ::
       如此一來這種 (-> [...] [...]) 記法 就有了普世性
       只要是能夠相互消的 狀態變化 都可以如此來記錄
       對我的語言來說是副作用的東西
       對 system shell 的管道來說可能是可以被 (-> [...] [...]) 記法 記錄的

  - k ::
       這是不是可以說成是 輸入輸出的相對性

  - x ::
       如若如此
       我們就知道帶有 IO 的函數
       雖然最然在外層也可能被處理爲 antecedent 與 succedent
       但是在我們的語言之內是沒法處理它們的
       只能另行標記 而不用 (-> [...] [...]) 語法

* 類型系統之向上抽象

  - k ::
       上面提到的普世性值得考察
       能想到反例嗎

  - x ::
       邏輯式編程可能是反例之一
       當要給邏輯式語言設計類型系統的時候
       用來描述關係之大概的 就不是箭頭所代表的有向變化
       而是一個多邊形的邊界了
       [正如之前所設想的爲 代數拓撲 所設計的語言一樣]
       但是也許可以這樣敘述普世性
       比如 hoare logic 描述底層帶有副作用的函數的類型
       也就是說 類型系統 總是可以向上抽象
       有時 當在 所使用的類型系統中描述某些 變化之大概
       而太過瑣碎繁複時
       可能就需要 把類型系統抽象到更高的層次
       但是 可能還沒有語言有這種能力

  - k ::
       我想這里還有很多需要學習的地方
       尤其是 hoare logic
       我想它能給我們的語法和語義設計帶來新的靈感

  - x ::
       沒錯 我們把這個話題留做下次討論吧

* 副作用之 undo

  - x ::
       當考慮 用一般的後綴表達式來做 bind 時
       區分了兩種語法
       #+begin_src scheme
       >:name (-> [data] [])
       #:name (-> [data] [(# :name data)])
       #+end_src
       二者都應該是帶有 binding 這個副作用的
       即 他們會影響 bs
       但是 這些影響又可能被 undo 掉
       那麼 有可能在這裏利用 bs 的類型系統 來獲得安全性嗎

  - k ::
       函數的類型聲明
       即 對 ds 之變化的大略描述
       之所以有用
       是因爲 ds 的變化可能非常複雜
       因而需要大略描述
       但是 這裏 bs 的變化很簡單
       所以可能根本就不需要這種大略描述

* >:name == #:name drop

  - k ::
       啊 我們根本就不需要 >:name
       只要 #:name drop 就好了
       #+begin_src scheme
       >:name (-> [data] [])
       #:name (-> [data] [(# :name data)])
       #:name drop (-> [data] [])
       #+end_src

* hoare-logic

  - x ::
       我們在日本就發現
       我們的 sequent 語言只是 hoare-logic 的特例

  - k ::
       沒錯
       sequent 的特別指出在於
       所有的狀態都是用棧來描述的
       而 hoare-logic 則更底層

  - x ::
       即便是對 #:name 來說
       他的類型 (-> [data] [(# :name data)])
       也是用棧中元素的變化來表達的

* 實現中需要做的變化

  - x ::
       首先
       語法上需要特殊處理形如 #:name 的 symbol
       正如爲了 var 而特殊處理 :name
       等等

* 爲何不後綴處理 ->

  - x ::
       既然我們用後綴表達式來處理 :
       那麼爲什麼不用後綴表達式來處理 ->
       #+begin_src scheme
       (def nat-induction
         (lambda (-> [(-> [nat] [type]) #:p
                      zero :p @
                      (-> [nat #:k :k :p @]
                          [:k succ :p @])
                      nat #:x]
                     [:x :p @])
           (-> [:p :p/z :p/s zero] [:p/z])
           (-> [:p :p/z :p/s :n succ]
               [:n
                :p :p/z :p/s :n nat-induction
                :p/s @])))

       (def nat-induction

         lambda

         [[nat] [type] -> #:p
          zero :p @
          [nat #:k :k :p @]
          [:k succ :p @] ->
          nat #:x]
         [:x :p @] ->

         [:p :p/z :p/s zero]
         [:p/z] ->

         [:p :p/z :p/s :n succ]
         [:n
          :p :p/z :p/s :n nat-induction
          :p/s @] ->)
       #+end_src

  - k ::
       既然我們不使用縮略語法了
       而又要以 只有需要的時候才使用編綴爲原則的話
       那麼 就真的沒有必要

  - x ::
       #+begin_src scheme
       (def nat-induction
         [[nat] [type] -> #:p
          zero :p @
          [nat #:k :k :p @]
          [:k succ :p @] ->
          nat #:x]
         [:x :p @] ->
         [:p :p/z :p/s zero]
         [:p/z] ->
         [:p :p/z :p/s :n succ]
         [:n
          :p :p/z :p/s :n nat-induction
          :p/s @] ->)

       ;; 省略 -> 而依據雙數斷句
       (def nat-induction
         [[nat] [type] -> #:p
          zero :p @
          [nat #:k :k :p @]
          [:k succ :p @] ->
          nat #:x]
         [:x :p @]

         [:p :p/z :p/s zero]
         [:p/z]

         [:p :p/z :p/s :n succ]
         [:n
          :p :p/z :p/s :n nat-induction
          :p/s @])

       (def nat-induction
         [[nat] [type] -> #:p
          zero :p @
          [nat #:k :k :p @]
          [:k succ :p @] ->
          nat #:x]
         [:x :p @]
         [:p :p/z :p/s zero]
         [:p/z]
         [:p :p/z :p/s :n succ]
         [:n
          :p :p/z :p/s :n nat-induction
          :p/s @])

       ;; 同時以這種方式處理 lambda
       (def nat-induction
         [[[nat] [type] -> #:p
           zero :p @
           [nat #:k :k :p @]
           [:k succ :p @] ->
           nat #:x]
          [:x :p @]
          [:p :p/z :p/s zero]
          [:p/z]
          [:p :p/z :p/s :n succ]
          [:n
           :p :p/z :p/s :n nat-induction
           :p/s @]] lambda)

       ;; 不省略 ->
       ;; 畢竟省略 -> 算是一種 sugar
       (def nat-induction
         [[[nat] [type] -> #:p
           zero :p @
           [nat #:k :k :p @]
           [:k succ :p @] ->
           nat #:x]
          [:x :p @] ->
          [:p :p/z :p/s zero]
          [:p/z] ->
          [:p :p/z :p/s :n succ]
          [:n
           :p :p/z :p/s :n nat-induction
           :p/s @] ->] lambda)

       ;; 甚至 def 也用後綴處理
       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @] ->
        [:p :p/z :p/s zero]
        [:p/z] ->
        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @] ->] lambda
       'nat-induction def

       ;; 或
       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @] ->
        [:p :p/z :p/s zero]
        [:p/z] ->
        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @] ->] lambda
       [nat-induction] def

       ;; 這樣其實是在解決 meta-programming 的問題
       ;; 既然程序本身被作爲數據如此肢解了
       #+end_src

  - k ::
       那麼我們就好好討論一下 meta-programming 的問題
       #+begin_src scheme
       [[[[nat] [type] -> #:p
          zero :p @
          [nat #:k :k :p @]
          [:k succ :p @] ->
          nat #:x]
         [:x :p @]]
        [[:p :p/z :p/s zero]
         [:p/z]]
        [[:p :p/z :p/s :n succ]
         [:n
          :p :p/z :p/s :n nat-induction
          :p/s @]]] lambda
       [nat-induction] def


       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @]

        [:p :p/z :p/s zero]
        [:p/z]

        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @]] lambda
       [nat-induction] def


       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @]]
       [[:p :p/z :p/s zero]
        [:p/z]

        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @]] lambda
       [nat-induction] def


       lambda
       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @]]
       [[:p :p/z :p/s zero]
        [:p/z]
        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @]]
       end

       ;; 假設我們的原則是
       ;; 讓 lambda 所做的工作越少越好
       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @]
        ->
        [:p :p/z :p/s zero]
        [:p/z]
        ->
        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @]
        ->] lambda
       [nat-induction] def

       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @] ->
        [:p :p/z :p/s zero]
        [:p/z] ->
        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @] ->]
       lambda
       [nat-induction] def


       (((nat) (type) -> #:p
         zero :p @
         (nat #:k :k :p @)
         (:k succ :p @) ->
         nat #:x)
        (:x :p @) ->
        (:p :p/z :p/s zero)
        (:p/z) ->
        (:p :p/z :p/s :n succ)
        (:n
         :p :p/z :p/s :n nat-induction
         :p/s @) ->)
       lambda
       (nat-induction) def


       {{{nat} {type} -> #:p
         zero :p @
         {nat #:k :k :p @}
         {:k succ :p @} ->
         nat #:x}
        {:x :p @} ->
        {:p :p/z :p/s zero}
        {:p/z} ->
        {:p :p/z :p/s :n succ}
        {:n
         :p :p/z :p/s :n nat-induction
         :p/s @} ->}
       lambda
       {nat-induction} def
       #+end_src

  - x ::
       啊 如若依照這種原則
       根本就只要用到三種括號中的一種
       我們選擇 [] 就好了

  - k ::
       我們是否要在這個 sequent0 中實踐這種語法

  - x ::
       哈哈
       這種感受就是脫離了 lisp 的傳統
       但是又接近了 forth
       我想使用 {} 可能優於使用 [] 或 ()
       因爲 [] 或 () 不單獨成行
       而 {} 單獨成行
       #+begin_src cicada-language
       [[[nat] [type] -> #:p
         zero :p @
         [nat #:k :k :p @]
         [:k succ :p @] ->
         nat #:x]
        [:x :p @] ->
        [:p :p/z :p/s zero]
        [:p/z] ->
        [:p :p/z :p/s :n succ]
        [:n
         :p :p/z :p/s :n nat-induction
         :p/s @] ->]
       lambda
       [nat-induction] def


       (((nat) (type) -> #:p
         zero :p @
         (nat #:k :k :p @)
         (:k succ :p @) ->
         nat #:x)
        (:x :p @) ->
        (:p :p/z :p/s zero)
        (:p/z) ->
        (:p :p/z :p/s :n succ)
        (:n
         :p :p/z :p/s :n nat-induction
         :p/s @) ->)
       lambda
       (nat-induction) def


       {{{nat} {type} -> #:p
         zero :p @
         {nat #:k :k :p @}
         {:k succ :p @} ->
         nat #:x}
        {:x :p @} ->
        {:p :p/z :p/s zero}
        {:p/z} ->
        {:p :p/z :p/s :n succ}
        {:n
         :p :p/z :p/s :n nat-induction
         :p/s @} ->}
       lambda
       {nat-induction} def
       #+end_src
       再看單獨成行的
       #+begin_src cicada-language
       [ [ [ nat ] [ type ] -> #:p
           zero :p @
           [ nat #:k :k :p @ ]
           [ :k succ :p @ ] ->
           nat #:x ]
         [ :x :p @ ] ->
         [ :p :p/z :p/s zero ]
         [ :p/z ] ->
         [ :p :p/z :p/s :n succ ]
         [ :n
           :p :p/z :p/s :n nat-induction
           :p/s @ ] ->
       ] lambda
       [ nat-induction ] def


       ( ( ( nat ) ( type ) -> #:p
           zero :p @
           (nat #:k :k :p @ )
           ( :k succ :p @ ) ->
           nat #:x )
         ( :x :p @ ) ->
         ( :p :p/z :p/s zero )
         ( :p/z ) ->
         ( :p :p/z :p/s :n succ )
         ( :n
           :p :p/z :p/s :n nat-induction
           :p/s @ ) ->
       ) lambda
       ( nat-induction ) def


       { { { nat } { type } -> #:p
           zero :p @
           { nat #:k :k :p @ }
           { :k succ :p @ } ->
           nat #:x }
         { :x :p @ } ->
         { :p :p/z :p/s zero }
         { :p/z } ->
         { :p :p/z :p/s :n succ }
         { :n
           :p :p/z :p/s :n nat-induction
           :p/s @ } ->
       } lambda
       { nat-induction } def
       #+end_src

  - k ::
       如此看來又是 [ ] 最順眼
       看來 這些都是 習慣所致呀

  - x ::
       那麼我們不考慮排版問題了
       先考慮實現
       首先我們可以把 [ ] 實現爲 call-with-output-to-new-ds
       這樣 lambda 所看到的就是 arrow-list
       而不是 syntax-tree 了

  - k ::
       但是這樣對 [ ] 中的 name 的解釋就有衝突了
       -> 需要他們是 literal
       而 lambda 需要他們是 call-with-output-to-new-ds
       所以 必須區分二者
       #+begin_src scheme
       { [ [ nat ] [ type ] -> #:p
           zero :p @
           [ nat #:k :k :p @ ]
           [ :k succ :p @ ] ->
           nat #:x ]
         [ :x :p @ ] ->
         [ :p :p/z :p/s zero ]
         [ :p/z ] ->
         [ :p :p/z :p/s :n succ ]
         [ :n
           :p :p/z :p/s :n nat-induction
           :p/s @ ] ->
       } lambda
       [ nat-induction ] def

       ;; 如果所有的 literal-symbol 都必須出現在 [ ] 中
       ;; 那麼就必須改如下爲下下或下下下
       { [ ] [ type ] ->
         zero  [ ] [ <> ] ->
         succ  [ <> ] [ <> ] ->
       } type
       [ def ] nat

       { [ ] [ type ] ->
         'zero  [ ] [ <> ] ->
         'succ  [ <> ] [ <> ] ->
         } type
       [ def ] nat

       { [ ] [ type ] ->
         [ zero ] [ ] [ <> ] ->
         [ succ ] [ <> ] [ <> ] ->
       } type
       [ def ] nat

       { [ nat nat ] [ nat ] ->
         [ :m zero ] [ :m ] ->
         [ :m :n succ ] [ :m :n add succ ] ->
       } lambda
       [ add ] def
       #+end_src

  - x ::
       我發現這種純粹的後綴表達式
       會強迫語言的正規性

* 否決純粹後綴

  - x ::
       但是我想我要放棄這種設計

  - k ::
       既然語言本身以後綴表達式爲特點
       爲什麼要放棄這種設計呢
       如果後綴表達式本身並不好
       爲什麼要設計一個以後綴表達式爲特點的語言呢

  - x ::
       我也不知道
       我想問題出在元編程能力上
       我們應該完全放棄這種能力
       以維護語言的穩定性

* 完全放棄元編程能力 以維護語言的穩定性

  - x ::
       說元編程能力不利與語言之穩定
       難道不是可笑而保守的說辭嗎
       我感覺我已經喪失了 對是非對錯的判別了

  - k ::
       我們可以在不做是非對錯之判別的條件下行動嗎

  - x ::
       比如埋頭實現 sequent0
       而不考慮其優劣

  ------------

  - x ::
       啊 我能想到 如果使用純粹的後綴表達式來實現它
       效果將是如何有趣
       用於實現語言核心語義的函數本身
       也將是用語言的 meta-programming 能力來實現的
       但是我還是決定暫時放棄這種效果
       只要求 jojo 中的東西是完全後綴的
       而自由地[不在乎純粹性地]處理外層非後綴語法
       [只要知道這些語法是可以利用元編程來後綴化的就可以了]

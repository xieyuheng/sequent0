#+title: sequent0 imp note

* 記

  - 回到 stack-based 的實現方式
    以明確 cut 在實現中的出現
    要知道
    形成 trunk 是因爲 branch
    而 cut 中不會出現 branch

  - 使用完全的 threaded-code-interpreter
    包括 return-stack
    不同的 context 就是不同的 return-stack 處理函數

  - 用完全不同的方式來處理 eq 而不計較理論特性
    cut 中 data uni (uni at level-0) 而 type cover
    可以解決 eq 的對稱性問題
    也能解決 (-> (:d : A) :d P) 的問題
    這樣出現 uni 的地方就有兩處
    一爲如上
    另一爲 branch 的 antecedent 對 type 的 antecedent 的特化

  - 可以用遞歸函數來證明 trunk 之間的 eq
    因此 eq 可以用來 rewrite trunk
    因此 eq 也可以用來 rewrite data

  - trunk 可以在 compute 中出現
    需要在 stack 中加入 interface 處理 trunk
    每次遇到 trunk 都嘗試 rewrite

  - 分離處理如下四種情況
    |      | type-check | compute |
    |------+------------+---------|
    | jo   |            |         |
    | data |            |         |
    jo 不爲 call 優化而直接用 (<tag> ~)

* ocaml version [give up]

*** using ocaml

    - 用 ocaml 重寫 sequent0
      有類型檢查就不必擔心相互遞歸函數之難以測試了

*** 區分 () [] {}

    - 需要重寫 sexp 的 parser
      區分 () [] {}

* dispatching

  | jo      | data    | double data |
  |---------+---------+-------------|
  | compose | bs/deep | cover       |
  | cut     |         | unify       |
